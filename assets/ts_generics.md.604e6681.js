import{_ as n,c as s,o as a,b as p}from"./app.96e179db.js";const g='{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/generics.md"}',t={},o=p(`<ol><li><p>\u7C7B\u578B\u53C2\u6570\u63A8\u65AD</p><div class="language-js"><pre><code><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> output <span class="token operator">=</span> identity<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;myString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// let output: string</span>
<span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&quot;myString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// let output: string</span>
</code></pre></div></li><li><p>\u6CDB\u578B\u7C7B\u578B</p><ol><li>\u51FD\u6570\u58F0\u660E<div class="language-js"><pre><code><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token literal-property property">myIdentity</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> Type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Type <span class="token operator">=</span> identity<span class="token punctuation">;</span>
</code></pre></div></li><li>\u6CDB\u578B\u7684\u7C7B\u578B\u53C2\u6570\u53EF\u4EE5\u4F7F\u7528\u4E0D\u540C\u7684\u540D\u5B57\uFF0C\u53EA\u8981\u6570\u91CF\u548C\u4F7F\u7528\u65B9\u5F0F\u4E0A\u4E00\u81F4\u5373</li><li>\u4EE5\u5BF9\u8C61\u7C7B\u578B\u7684\u8C03\u7528\u7B7E\u540D\u7684\u5F62\u5F0F\uFF0C\u4E66\u5199\u8FD9\u4E2A\u6CDB\u578B\u7C7B\u578B<div class="language-js"><pre><code><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token literal-property property">myIdentity</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">}</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span>
</code></pre></div></li><li>\u6CDB\u578B\u63A5\u53E3<div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token punctuation">{</span>
    <span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">function</span> identity<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token literal-property property">myIdentity</span><span class="token operator">:</span> GenericIdentityFn <span class="token operator">=</span> identity<span class="token punctuation">;</span>
</code></pre></div></li><li>\u6CDB\u578B\u53C2\u6570\u4F5C\u4E3A\u6574\u4E2A\u63A5\u53E3\u7684\u53C2\u6570<div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span><span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> identity<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token literal-property property">myIdentity</span><span class="token operator">:</span> GenericIdentityFn<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span>
</code></pre></div></li></ol></li><li><p>\u6CDB\u578B\u7C7B</p><p>\u6CDB\u578B\u7C7B\u4EC5\u4EC5\u5BF9\u5B9E\u4F8B\u90E8\u5206\u751F\u6548\uFF0C\u6240\u4EE5\u5F53\u6211\u4EEC\u4F7F\u7528\u7C7B\u7684\u65F6\u5019\uFF0C\u6CE8\u610F\u9759\u6001\u6210\u5458\u5E76\u4E0D\u80FD\u4F7F\u7528\u7C7B\u578B\u53C2\u6570</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>NumType<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">zeroValue</span><span class="token operator">:</span> NumType<span class="token punctuation">;</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> NumType<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> NumType</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> NumType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>\u6CDB\u578B\u7EA6\u675F</p><div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">length</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token class-name">Lengthwise</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ol><li>\u5728\u6CDB\u578B\u7EA6\u675F\u4E2D\u4F7F\u7528\u7C7B\u578B\u53C2\u6570<div class="language-js"><pre><code><span class="token keyword">function</span> getProperty<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Key <span class="token keyword">extends</span> <span class="token class-name">keyof</span> Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Type<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> Key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;&quot;m&quot;&#39; is not assignable to parameter of type &#39;&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;&#39;.</span>
</code></pre></div></li></ol></li><li><p>\u5728\u6CDB\u578B\u4E2D\u4F7F\u7528\u7C7B\u7C7B\u578B</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">BeeKeeper</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hasMask</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">ZooKeeper</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;Mike&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">numLegs</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Bee</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">keeper</span><span class="token operator">:</span> BeeKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">keeper</span><span class="token operator">:</span> ZooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> createInstance<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">A</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createInstance</span><span class="token punctuation">(</span>Lion<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token function">createInstance</span><span class="token punctuation">(</span>Bee<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>hasMask<span class="token punctuation">;</span>
</code></pre></div></li></ol>`,1),e=[o];function c(l,r,k,u,i,y){return a(),s("div",null,e)}var m=n(t,[["render",c]]);export{g as __pageData,m as default};
