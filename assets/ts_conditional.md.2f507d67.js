import{_ as n,c as s,o as a,b as p}from"./app.96e179db.js";const y='{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/conditional.md"}',t={},e=p(`<blockquote><p>\u6761\u4EF6\u7C7B\u578B\uFF08Conditional types\uFF09\u5C31\u662F\u7528\u6765\u63CF\u8FF0\u8F93\u5165\u7C7B\u578B\u548C\u8F93\u51FA\u7C7B\u578B\u4E4B\u95F4\u7684\u5173\u7CFB</p></blockquote><ol><li>\u6761\u4EF6\u7C7B\u578B, SomeType extends OtherType ? TrueType : FalseType;<div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">woof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
type Example1 <span class="token operator">=</span> Dog <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">?</span> number <span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token comment">// type Example1 = number</span>
</code></pre></div></li><li>\u7B80\u5316\u51FD\u6570\u91CD\u8F7D<div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">IdLabel</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> number <span class="token comment">/* some fields */</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">NameLabel</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token comment">/* other fields */</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createLabel</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> IdLabel<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createLabel</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> NameLabel<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createLabel</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nameOrId</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> IdLabel <span class="token operator">|</span> NameLabel<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createLabel</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nameOrId</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> IdLabel <span class="token operator">|</span> NameLabel <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&quot;unimplemented&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type NameOrId<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span> <span class="token operator">|</span> string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span>
    <span class="token operator">?</span> IdLabel
    <span class="token operator">:</span> NameLabel<span class="token punctuation">;</span>
</code></pre></div></li><li>\u6761\u4EF6\u7C7B\u578B\u7EA6\u675F<div class="language-js"><pre><code>type Flatten<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre></div></li><li>\u5728\u6761\u4EF6\u7C7B\u578B\u91CC\u63A8\u65AD,\u7528infer\u5173\u952E\u5B57\u58F0\u660E\u4E86\u4E00\u4E2A\u65B0\u7684\u7C7B\u578B\u53D8\u91CFItem\uFF0C\u6839\u636E\u6CDB\u578B\u7684\u503C\u5728\u6761\u4EF6\u91CC\u63A8\u65AD\u51FAItem\u771F\u5B9E\u7C7B\u578B<div class="language-js"><pre><code>type Flatten<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span> <span class="token operator">=</span> Type <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer Item<span class="token operator">&gt;</span> <span class="token operator">?</span> Item <span class="token operator">:</span> Type<span class="token punctuation">;</span>
</code></pre></div></li><li>\u5206\u53D1\u6761\u4EF6\u7C7B\u578B <ol><li>\u5728\u6CDB\u578B\u4E2D\u4F7F\u7528\u6761\u4EF6\u7C7B\u578B\u7684\u65F6\u5019\uFF0C\u5982\u679C\u4F20\u5165\u4E00\u4E2A\u8054\u5408\u7C7B\u578B\uFF0C\u5C31\u4F1A\u53D8\u6210\u5206\u53D1\u7684<div class="language-js"><pre><code>type ToArray<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span> <span class="token operator">=</span> Type <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> never<span class="token punctuation">;</span>
type StrArrOrNumArr <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// \u6CDB\u578B\u662Fstring | number</span>
<span class="token comment">// \u76F8\u5F53\u4E8EToArray&lt;string&gt; | ToArray&lt;number&gt;;     </span>
<span class="token comment">// type StrArrOrNumArr = string[] | number[]</span>
</code></pre></div></li><li>\u907F\u514D\u5206\u53D1\uFF0C\u7528\u65B9\u62EC\u53F7\u5305\u88F9extends\u5173\u952E\u5B57\u7684\u6BCF\u4E00\u90E8\u5206<div class="language-js"><pre><code>type ToArrayNonDist<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Type<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>any<span class="token punctuation">]</span> <span class="token operator">?</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> never<span class="token punctuation">;</span>
type StrArrOrNumArr <span class="token operator">=</span> ToArrayNonDist<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// \u5C06\u8054\u5408\u7C7B\u578B\u5F53\u4F5C\u4E00\u4E2A\u7C7B\u578B\u6574\u4F53\u4F20\u5165</span>
<span class="token comment">// type StrArrOrNumArr = (string | number)[]</span>
</code></pre></div></li></ol></li></ol>`,2),o=[e];function c(r,l,k,u,i,d){return a(),s("div",null,o)}var g=n(t,[["render",c]]);export{y as __pageData,g as default};
