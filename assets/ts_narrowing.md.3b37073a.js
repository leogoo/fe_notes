import{_ as n,c as s,o as a,b as p}from"./app.96e179db.js";const g='{"title":"Narrowing \u7C7B\u578B\u6536\u7A84","description":"","frontmatter":{},"headers":[{"level":2,"title":"Narrowing \u7C7B\u578B\u6536\u7A84","slug":"narrowing-\u7C7B\u578B\u6536\u7A84"}],"relativePath":"ts/narrowing.md"}',t={},o=p(`<h2 id="narrowing-\u7C7B\u578B\u6536\u7A84" tabindex="-1">Narrowing \u7C7B\u578B\u6536\u7A84 <a class="header-anchor" href="#narrowing-\u7C7B\u578B\u6536\u7A84" aria-hidden="true">#</a></h2><ol><li><p>typeOf \u7C7B\u578B\u4FDD\u62A4</p></li><li><p>\u771F\u503C\u6536\u7A84</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">strs</span><span class="token operator">:</span> string <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> strs <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> s <span class="token keyword">of</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strs <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>\u7B49\u503C\u6536\u7A84,\u4F7F\u7528 switch \u8BED\u53E5\u548C\u7B49\u503C\u68C0\u67E5\u6BD4\u5982 == !== == != \u53BB\u6536\u7A84\u7C7B\u578B</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">strs</span><span class="token operator">:</span> string <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strs <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> s <span class="token keyword">of</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> strs <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>in \u64CD\u4F5C\u7B26\u6536\u7A84</p><div class="language-js"><pre><code>type Fish <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function-variable function">swim</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
type Bird <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
type Human <span class="token operator">=</span> <span class="token punctuation">{</span> swim<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> fly<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird <span class="token operator">|</span> Human</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;swim&quot;</span> <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    animal<span class="token punctuation">;</span> <span class="token comment">// (parameter) animal: Fish | Human</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    animal<span class="token punctuation">;</span> <span class="token comment">// (parameter) animal: Bird | Human</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>instanceof \u6536\u7A84,</p></li><li><p>\u8D4B\u503C\u8BED\u53E5\uFF0CTypeScript \u53EF\u4EE5\u6839\u636E\u8D4B\u503C\u8BED\u53E5\u7684\u53F3\u503C\uFF0C\u6B63\u786E\u7684\u6536\u7A84\u5DE6\u503C</p><div class="language-js"><pre><code><span class="token keyword">let</span> test <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>
test <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
test <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span>
test <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u80FD\u5C06boolean\u8D4B\u503C\u7ED9 number | string;</span>
</code></pre></div></li><li><p>\u63A7\u5236\u6D41\u5206\u6790</p><div class="language-js"><pre><code><span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">|</span> boolean<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token comment">// number | string</span>
</code></pre></div></li><li><p>type predicates</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">pet</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird</span><span class="token punctuation">)</span><span class="token operator">:</span> pet is Fish <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>pet <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>\u53EF\u8FA8\u522B\u8054\u5408</p><p>\u5F53\u8054\u5408\u7C7B\u578B\u4E2D\u7684\u6BCF\u4E2A\u7C7B\u578B\uFF0C\u90FD\u5305\u542B\u4E86\u4E00\u4E2A\u5171\u540C\u7684\u5B57\u9762\u91CF\u7C7B\u578B\u7684\u5C5E\u6027\uFF0CTypeScript \u5C31\u4F1A\u8BA4\u4E3A\u8FD9\u662F\u4E00\u4E2A\u53EF\u8FA8\u522B\u8054\u5408\uFF08discriminated union\uFF09\uFF0C\u7136\u540E\u53EF\u4EE5\u5C06\u5177\u4F53\u6210\u5458\u7684\u7C7B\u578B\u8FDB\u884C\u6536\u7A84\u3002</p><div class="language-js"><pre><code><span class="token comment">// kind\u7C7B\u578B\u53EF\u80FD\u662Fcircle\u6216square\uFF0C\u8FD9\u5C31\u5BFC\u81F4radius\u548CsideLength\u4E5F\u90FD\u662F\u53EF\u9009\u7684</span>
<span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span>
  radius<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  sideLength<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5373\u4FBF\u6211\u4EEC\u5224\u65AD kind \u662F circle \u7684\u60C5\u51B5\uFF0C\u4F46\u7531\u4E8E radius \u662F\u4E00\u4E2A\u53EF\u9009\u5C5E\u6027\uFF0CTypeScript \u4F9D\u7136\u4F1A\u8BA4\u4E3A radius \u53EF\u80FD\u662F undefined</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">shape</span><span class="token operator">:</span> Shape</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// Object is possibly &#39;undefined&#39;.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u975E\u7A7A\u65AD\u8A00</span>
<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">shape</span><span class="token operator">:</span> Shape</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius<span class="token operator">!</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u7528\u975E\u7A7A\u65AD\u8A00\u53EF\u4EE5\u89E3\u51B3\u62A5\u9519\uFF0C\u4F46\u662F\u6709\u70B9\u77DB\u76FE\uFF0C\u65E2\u7136\u8BBE\u7F6E\u4E86\u53EF\u9009\uFF0C\u8FD9\u91CC\u53C8\u662F\u786E\u5B9A\u975E\u7A7A\uFF0C\u800C\u4E14\u7C7B\u578B\u7684\u5224\u65AD\u53C8\u597D\u50CF\u6CA1\u5565\u7528\u4E86\u3002\u4E0A\u9762\u7684\u95EE\u9898\u5728\u4E8E\u7C7B\u578B\u68C0\u67E5\u5668\u5E76\u6CA1\u6709\u65B9\u6CD5\u6839\u636E kind \u5C5E\u6027\u5224\u65AD radius \u548C sideLength \u5C5E\u6027\u662F\u5426\u5B58\u5728</p><div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span>
  <span class="token literal-property property">radius</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span>
  <span class="token literal-property property">sideLength</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u8FD9\u6837\u5B9A\u4E49\u5C31\u53EF\u4EE5\u901A\u8FC7kind\u8FD9\u4E2A\u5171\u540C\u7684\u5B57\u9762\u91CF\u7C7B\u578B\u7684\u5C5E\u6027\u6765\u5224\u65AD\u7C7B\u578B</span>
type Shape <span class="token operator">=</span> Circle <span class="token operator">|</span> Square<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">shape</span><span class="token operator">:</span> Shape</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>never \u7C7B\u578B</p><ol><li>never \u7C7B\u578B\u6765\u8868\u793A\u4E00\u4E2A\u4E0D\u53EF\u80FD\u5B58\u5728\u7684\u72B6\u6001</li><li>never \u7C7B\u578B\u53EF\u4EE5\u8D4B\u503C\u7ED9\u4EFB\u4F55\u7C7B\u578B\uFF0C\u7136\u800C\uFF0C\u6CA1\u6709\u7C7B\u578B\u53EF\u4EE5\u8D4B\u503C\u7ED9 never \uFF08\u9664\u4E86 never \u81EA\u8EAB\uFF09\u3002\u8FD9\u5C31\u610F\u5473\u7740\u4F60\u53EF\u4EE5\u5728 switch \u8BED\u53E5\u4E2D\u4F7F\u7528 never \u6765\u505A\u4E00\u4E2A\u7A77\u5C3D\u68C0\u67E5<div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;triangle&quot;</span><span class="token punctuation">;</span>
    <span class="token literal-property property">sideLength</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type Shape <span class="token operator">=</span> Circle <span class="token operator">|</span> Square <span class="token operator">|</span> Triangle<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">shape</span><span class="token operator">:</span> Shape</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;circle&quot;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;square&quot;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> shape<span class="token punctuation">.</span>sideLength <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">const</span> <span class="token literal-property property">_exhaustiveCheck</span><span class="token operator">:</span> never <span class="token operator">=</span> shape<span class="token punctuation">;</span>
        <span class="token comment">// Type &#39;Triangle&#39; is not assignable to type &#39;never&#39;.</span>
        <span class="token keyword">return</span> _exhaustiveCheck<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ol></li></ol>`,2),e=[o];function c(l,r,u,k,i,d){return a(),s("div",null,e)}var m=n(t,[["render",c]]);export{g as __pageData,m as default};
