import{_ as n,c as s,o as a,b as p}from"./app.96e179db.js";const y='{"title":"\u51FD\u6570","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u51FD\u6570","slug":"\u51FD\u6570"}],"relativePath":"ts/func.md"}',t={},o=p(`<h2 id="\u51FD\u6570" tabindex="-1">\u51FD\u6570 <a class="header-anchor" href="#\u51FD\u6570" aria-hidden="true">#</a></h2><ol><li><p>\u8C03\u7528\u7B7E\u540D</p><p>\u51FD\u6570\u9664\u4E86\u53EF\u4EE5\u88AB\u8C03\u7528\uFF0C\u81EA\u5DF1\u4E5F\u662F\u53EF\u4EE5\u6709\u5C5E\u6027\u503C\u7684\u3002\u5982\u679C\u60F3\u63CF\u8FF0\u4E00\u4E2A\u5E26\u6709\u5C5E\u6027\u7684\u51FD\u6570\uFF0C\u53EF\u4EE5\u5728\u4E00\u4E2A\u5BF9\u8C61\u7C7B\u578B\u4E2D\u5199\u4E00\u4E2A\u8C03\u7528\u7B7E\u540D</p><div class="language-js"><pre><code>type DescribableFunction <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token comment">// \u8DDF\u51FD\u6570\u7C7B\u578B\u8868\u8FBE\u5F0F\u7A0D\u6709\u4E0D\u540C\uFF0C\u5728\u53C2\u6570\u5217\u8868\u548C\u8FD4\u56DE\u7684\u7C7B\u578B\u4E4B\u95F4\u7528\u7684\u662F : \u800C\u4E0D\u662F =&gt;</span>
  <span class="token punctuation">(</span>someArg<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fn</span><span class="token operator">:</span> DescribableFunction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>description <span class="token operator">+</span> <span class="token string">&quot; returned &quot;</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>\u6784\u9020\u7B7E\u540D</p><div class="language-js"><pre><code>type SomeConstructor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> SomeObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ctor</span><span class="token operator">:</span> SomeConstructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u8C03\u7528\u7B7E\u540D\u548C\u6784\u9020\u7B7E\u540D\u5408\u5E76</span>
<span class="token keyword">interface</span> <span class="token class-name">CallOrConstruct</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>
  <span class="token punctuation">(</span>n<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>\u6CDB\u578B\u51FD\u6570</p><ol><li>\u6CDB\u578B\u5C31\u662F\u88AB\u7528\u6765\u63CF\u8FF0\u4E24\u4E2A\u503C\u4E4B\u95F4\u7684\u5BF9\u5E94\u5173\u7CFB<div class="language-js"><pre><code><span class="token keyword">function</span> firstElement<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// s is of type &#39;string&#39;</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">firstElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// n is of type &#39;number&#39;</span>
<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">firstElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// u is of type undefined</span>
<span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token function">firstElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li>\u5199\u4E00\u4E2A\u597D\u7684\u6CDB\u578B\u51FD\u6570\u7684\u4E00\u4E9B\u5EFA\u8BAE <ol><li>\u7C7B\u578B\u53C2\u6570\u4E0B\u79FB\uFF0C\u76F4\u63A5\u4F7F\u7528\u7C7B\u578B\u53C2\u6570\u800C\u4E0D\u662F\u7EA6\u675F\u5B83<div class="language-js"><pre><code><span class="token comment">// good</span>
<span class="token keyword">function</span> firstElement1<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> firstElement2<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li>\u4F7F\u7528\u66F4\u5C11\u7684\u7C7B\u578B\u53C2\u6570</li><li>\u7C7B\u578B\u53C2\u6570\u5E94\u8BE5\u51FA\u73B0\u4E24\u6B21\uFF0C\u5982\u679C\u4E00\u4E2A\u7C7B\u578B\u53C2\u6570\u4EC5\u4EC5\u51FA\u73B0\u5728\u4E00\u4E2A\u5730\u65B9\uFF0C\u5C31\u9700\u8981\u91CD\u65B0\u8003\u8651\u662F\u5426\u771F\u7684\u9700\u8981\u5B83<div class="language-js"><pre><code><span class="token keyword">function</span> greet<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ol></li></ol></li><li><p>\u63A8\u65AD</p><div class="language-js"><pre><code><span class="token keyword">function</span> map<span class="token operator">&lt;</span>Input<span class="token punctuation">,</span> Output<span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Input<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> Input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Output<span class="token punctuation">)</span><span class="token operator">:</span> Output<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Parameter &#39;n&#39; is of type &#39;string&#39;</span>
<span class="token comment">// &#39;parsed&#39; is of type &#39;number[]&#39;</span>
<span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>\u7EA6\u675F</p><div class="language-js"><pre><code><span class="token keyword">function</span> longest<span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Type<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> Type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// longerArray is of type &#39;number[]&#39;</span>
<span class="token keyword">const</span> longerArray <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// longerString is of type &#39;alice&#39; | &#39;bob&#39;</span>
<span class="token keyword">const</span> longerString <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Error! Numbers don&#39;t have a &#39;length&#39; property</span>
<span class="token keyword">const</span> notOK <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;number&#39; is not assignable to parameter of type &#39;{ length: number; }&#39;.</span>
</code></pre></div></li><li><p>\u58F0\u660E\u7C7B\u578B\u53C2\u6570</p><p>\u901A\u5E38\u80FD\u81EA\u52A8\u63A8\u65AD\u6CDB\u578B\u8C03\u7528\u4E2D\u4F20\u5165\u7684\u7C7B\u578B\u53C2\u6570\uFF0C\u4F46\u4E5F\u5E76\u4E0D\u80FD\u603B\u662F\u63A8\u65AD\u51FA</p><div class="language-js"><pre><code><span class="token keyword">function</span> combine<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">arr2</span><span class="token operator">:</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span>

<span class="token comment">// \u624B\u52A8\u6307\u5B9Atype</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> combine<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>\u53EF\u9009\u53C2\u6570</p></li><li><p>\u51FD\u6570\u91CD\u8F7D</p><ol><li>\u91CD\u8F7D\u7B7E\u540D</li><li>\u5B9E\u73B0\u7B7E\u540D</li><li>\u5C3D\u53EF\u80FD\u7684\u4F7F\u7528\u8054\u5408\u7C7B\u578B\u66FF\u4EE3\u91CD\u8F7D</li></ol></li><li><p>\u5269\u4F59\u53C2\u6570</p><ol><li>\u5269\u4F59\u53C2\u6570\u7684\u7C7B\u578B\u4F1A\u88AB\u9690\u5F0F\u8BBE\u7F6E\u4E3A any[] \u800C\u4E0D\u662F any</li><li>TypeScript \u5E76\u4E0D\u4F1A\u5047\u5B9A\u6570\u7EC4\u662F\u4E0D\u53D8\u7684(immutable)<div class="language-js"><pre><code><span class="token comment">// \u901A\u8FC7 as const \u8BED\u6CD5\u5C06\u5176\u53D8\u4E3A\u53EA\u8BFB\u5143\u7EC4</span>
<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> angle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ol></li><li><p>\u53C2\u6570\u89E3\u6784</p></li><li><p>\u51FD\u6570\u7684\u53EF\u8D4B\u503C\u6027</p></li></ol>`,2),e=[o];function c(l,u,k,r,i,d){return a(),s("div",null,e)}var g=n(t,[["render",c]]);export{y as __pageData,g as default};
